#!/usr/bin/env python
#
# omxplayer-sync
#
# Copyright 2012, Simon Josi
# Simon Josi me(at)yokto(dot)net
#
# This program is free software; you can redistribute 
# it and/or modify it under the terms of the GNU 
# General Public License version 3 as published by 
# the Free Software Foundation.
#

import re
import os
import sys
import math
import socket
import thread
import pexpect
import signal
from time import sleep, time
from threading import local
from optparse import OptionParser, BadOptionError, AmbiguousOptionError

OMXPLAYER = 'omxplayer'
PORT = 1666
TOLERANCE = 0.25
ADJUST_OMXPLAYER = -0.1
ADJUST_MASTER = 0.0
ADJUST_SLAVE = 0.0
SEEK_SIZE = 5

REGEX_STATUS = re.compile(r"V :\s*([\d\.]+).*")
REGEX_DONE = re.compile(r"have a nice day.*")

global position_master
position_master = 0.0

global filename_master
filename_master = ''

class PassThroughOptionParser(OptionParser):
    """
    An unknown option pass-through implementation of OptionParser.

    When unknown arguments are encountered, bundle with largs and try again,
    until rargs is depleted.  

    sys.exit(status) will still be called if a known argument is passed
    incorrectly (e.g. missing arguments or bad argument types, etc.)        
    """
    def _process_args(self, largs, rargs, values):
        while rargs:
            try:
                OptionParser._process_args(self,largs,rargs,values)
            except (BadOptionError,AmbiguousOptionError), e:
                largs.append(e.opt_str)

def read_position_master():
   global position_master
   global filename_master

   sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
   sock.bind(('0.0.0.0', PORT))

   while True:
       data = sock.recvfrom(1024)[0].split('%', 1)
       position_master = float(data[0])
       filename_master = data[1]

def play_file(filename, options, omxplayer_options):
    process = pexpect.spawn('%s -s %s %s' % (
        OMXPLAYER, ' '.join(omxplayer_options), filename), timeout=0.01)
    wait_for_sync = False
    position_local = 0.0
    adjust = ADJUST_OMXPLAYER + (options.master and ADJUST_MASTER or ADJUST_SLAVE)

    if options.verbose:
        print "playing %s" % filename

    def kill_process(signum, frame):
       process.kill(15)
       sys.exit(0)
    signal.signal(signal.SIGINT, kill_process)

    if options.master:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        try:
            sock.connect((options.destination, PORT))
        except:
            print "connect: Network is unreachable"
            pass

    while True:
        eof = False
        while True:
            index = process.expect([
                REGEX_STATUS,
                pexpect.TIMEOUT,
                pexpect.EOF,
                REGEX_DONE,
            ])
            if index == 1:
                break
            elif index in (2,3):
                if options.verbose:
                    print "omxplayer has ended..."
                eof = True
                break
            else:
                position_local = float(process.match.group(1)) + adjust
        if eof: break

        if options.master:
            if options.verbose:
                #sys.stdout.write('\r'); sys.stdout.flush()
                #sys.stdout.write("local: %.2f" % position_local)
                sys.stdout.write("local: %.2f %.0f\n" % (position_local, math.modf(position_local)[0]*100/4))

            try:
                sock.send('%s%%%s' % (str(position_local), filename))
            except socket.error:
                pass

        if options.slave:
            deviation = position_master - position_local
            if options.verbose:
                print "local: %.2f master: %.2f deviation: %.2f wait: %r" % (
                    position_local, position_master, deviation, wait_for_sync)

            if wait_for_sync:
                if deviation >= -0.1 and deviation < 0.1:
                    process.send('p')
                    if options.verbose:
                        print "we are sync, play..."
                    wait_for_sync = False
                    sleep(0.2)
                else:
                    continue

            if abs(deviation) > TOLERANCE \
            and position_local > 1.0 \
            and position_master > 1.0 \
            and filename == filename_master:
                if position_local < position_master :
                    if options.verbose:
                        print "seek forward..."
                    process.send('\x1B[C')
                    sleep(0.2)
                elif position_local > (position_master + SEEK_SIZE*2):
                    if options.verbose:
                        print "seek backwards..."
                    process.send('\x1B[D')
                else:
                    process.send('p')
                    wait_for_sync=True

def main():
    p = PassThroughOptionParser()
    p.add_option('--master', '-m', action='store_true')
    p.add_option('--slave', '-l', action='store_true')
    p.add_option('--destination', '-x', default='255.255.255.255')
    p.add_option('--loop', '-u', action='store_true')
    p.add_option('--verbose', '-v', action='store_true')
    options, arguments = p.parse_args()

    filenames, omxplayer_options = [], []
    for argument in arguments:
        if argument.startswith('-'):
            omxplayer_options.append(argument)
        else:
            filenames.append(argument)

    if options.slave:
        thread.start_new_thread(read_position_master,())

    while True:
        for filename in filenames:
            if options.slave and (filename_master in filenames):
                filename = filename_master
            play_file(filename, options, omxplayer_options)

        if not options.loop: break

if __name__ == '__main__':
    main()
